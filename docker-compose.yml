services:
  reverse-proxy:
    container_name: di-reverse-proxy
    image: traefik:v3.3
    # command:
      # - "--api.insecure=true"
      # - "providers.docker"
      # - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      # #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # - "--certificatesresolvers.myresolver.acme.email=ngstafford1@gmail.com"
      # - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The http Port
      - "80:80"
      # The https Port 
      - "443:443"
      # The traefik Web UI (neabled by --api.insecure=true)
      - "8080:8080"
    volumes: 
      # So that Traefik can listen to Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # config
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./traefik_dynamic.yaml:/etc/traefik/traefik_dynamic.yaml:ro
      - letsencrypt:/letsencrypt
    # networks:
    #   internal:
  frontend-service:
    container_name: di-frontend_container
    labels:
      - "traefik.enable=true" 
      - "traefik.http.routers.frontend-service.rule=Host(`dependencyinspection.com`)"  
      # - "traefik.http.routers.frontend-service.rule=Host(`localhost`)"  
      - "traefik.http.services.frontend-service.loadbalancer.server.port=8081"  
      # - "traefik.http.routers.frontend-service.entrypoint=web"
      # - "traefik.http.routers.frontend-service.entrypoint=websecure"
      - "traefik.http.routers.frontend-service.tls.certresolver=myresolver"
    build:
      context: ./frontend
      args: 
       - VITE_APP_BACKEND_ADDRESS=https://backend-service/api/
    depends_on: 
      backend-service:
        condition: service_healthy
    restart: always
    # ports: 
    #   - 8081:8081
    # networks:
    #   internal:
  backend-service: 
    # container_name: di-backend_container
    labels:
      - "traefik.enable=true"  
      - "traefik.http.routers.backend-service.rule=Host(`dependencyinspection.com`)" 
      # - "traefik.http.routers.backend-service.rule=Host(`localhost/api`)" 
      - "traefik.http.services.backend-service.loadbalancer.server.port=5001"
      # - "traefik.http.routers.backend-service.entrypoint=web"
      # - "traefik.http.routers.backend-service.entrypoint=websecure"
      - "traefik.http.routers.backend-service.tls.certresolver=myresolver"
    build:
      context: ./backend
      # target: development
      target: production
    # ports:
    #   - "5001:5001"
    volumes:
      - ./backend:/backendApp
      - ./neo4j_auth.txt:/app/neo4j_auth.txt
    # potential bind mount so local changes are reflected in docker container
    # volumes: 
    #   - ./app:/usr/src/app
    #   - /usr/src/app/node_modules
    # links: # apparently depreciated??  
    #   - db:postgress
    depends_on:
      neo4j-service:
        condition: service_healthy
    healthcheck:
      test: wget http://backend-service:5001/healthcheck || exit 1
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s
    environment:
      - PORT=5001
      - SECRET_KEY="you-will-never-guess"
      - ENV_FOR_DYNACONF=docker
    deploy:
      mode: replicated
      replicas: 3
    # networks:
    #   internal:
  neo4j-service: 
    container_name: di-neo4j_container
    labels:
      - "traefik.enable=true"  
    image: neo4j:5.26.0-bullseye
    # potential data mount so data is persistent across containers
    # volumes: 
    #   - database:/data/db
    restart: always
    # ports:
    #   - "7474:7474"  # Neo4j HTTP interface
    #   - "7687:7687"  # Neo4j Bolt protocol (typically used for database access)
    environment:
      - NEO4J_AUTH=/run/secrets/neo4j_auth_file
      - NEO4J_AUTH_FILE=/run/secrets/neo4j_auth_file
    secrets:
      - neo4j_auth_file
    healthcheck:
      test: wget http://neo4j-service:7474 || exit 1
      interval: 2s
      timeout: 10s
      retries: 20
      start_period: 3s
    # networks:
    #   internal:

volumes:
  letsencrypt:
#   database:
secrets:
  neo4j_auth_file:
    file: ./neo4j_auth.txt
# networks: 
#   internal:
